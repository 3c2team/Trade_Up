<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
    <mapper namespace="com.itwillbs.tradeup.mapper.MainMapper">
    	<select id="selectCategory" resultType="map">
    		SELECT * FROM CATEGORY
    	</select>
    	
    	<select id="selectProduct" resultType="map">
    		SELECT product_name,product_price,category_name
			  FROM result_product p
			  JOIN CATEGORY c
				ON p.category_num = c.category_idx
			 WHERE 1=1
			<if test="search != null">
				  AND product_name like('%${search}%') 
			</if>	  
			<if test="category != null">
				  AND category_name = #{category} 
			</if>	  
			<if test="maxPrice != null">
				  AND #{maxPrice} + 1 > product_price
			</if>	  
			<if test="minPrice != null">
				  AND product_price > #{minPrice} - 1
			</if>	  
    	</select>
    	<select id="selectQnaCategory" resultType="map">
    		SELECT *
			FROM QUESTION_CATEGORY
    	</select>
    	<select id="selectQnaCategoryDetail" resultType="map">
			SELECT *
			FROM QUESTION_CATEGORY_DETAIL 
			WHERE qna_category_num = #{qnaCategoryName};
    	</select>
    	<insert id="insertQuestion">
    		INSERT INTO QUESTION
    		VALUES(
	    		null
	    		,(SELECT member_num
		    		FROM MEMBER
		    		WHERE member_id = #{sId})
	    		,#{qna_category_datail}
	    		,#{content}
	    		,''
	    		,'N'
	    		,now()
    		)
    	</insert>
    	<insert id="insertQuestionImg">
    		INSERT INTO QUESTION_IMG
    		VALUES(
	    		(select MAX(qna_num) as qna_num from QUESTION)
	    		,#{file_name}
	    		,#{real_file}
    		)
    	</insert>
    	<select id="selectOftenQna" resultType="map">
			SELECT *
			FROM OFTEN_QUESTION 
			<if test="qna_filter != 0">
				WHERE qna_filter = #{qna_filter}
			</if>
			<if test="qna_select != null">
				WHERE qna_content LIKE '%${qna_select}%'
			</if>
			order by often_qna_num desc
    	</select>
    	<select id="selectUserQna" resultType="map">
    		SELECT qna_content
    				,qna_answer
    				,IF(qna_is_answer = 'N','미 답변','답변완료') as qna_is_answer
    				,qna_date
    				,qna_num
			FROM QUESTION q
			JOIN (SELECT member_num
						FROM MEMBER
						WHERE member_id = #{sId}) m
			ON m.member_num = q.member_num		
    	</select>
    	<select id="selectQnaDetail" resultType="map">
    		SELECT *
    		FROM QUESTION
    		WHERE qna_num = #{qna_num}
    	</select>
    	<select id="selectProductPrice" resultType="map">
   	        WITH RECURSIVE result_month AS (
            SELECT month(now()) -3 AS rnum
             UNION ALL
             SELECT rnum + 1 
             FROM result_month
             WHERE  month(now()) > rnum
			)
		    SELECT CONCAT(rnum,'월')  AS month
					,ifnull(product_avg,0) as product_avg
		            ,ifnull(product_max,0) as product_max
		            ,ifnull(product_min,0) as product_min
		    FROM result_month s LEFT JOIN (SELECT FLOOR(AVG(CAST(REPLACE(product_price,',','') AS signed integer))) AS product_avg
											,MAX(CAST(REPLACE(product_price,',','') AS signed integer)) as product_max
                                            ,MIN(CAST(REPLACE(product_price,',','') AS signed integer)) as product_min
											,MONTH(product_release) as month
									 FROM PRODUCT
									 WHERE product_release BETWEEN DATE_SUB(CURDATE(),INTERVAL 3 MONTH) AND DATE_ADD(CURDATE(), INTERVAL 1 DAY)
								  	 AND product_name LIKE '%${product_name}%'
									 GROUP BY MONTH(product_release)) p
 		ON p.month = s.rnum;
		</select>
    	<select id="selectMarketProduct" resultType="map">
	    	SELECT product_num
					,member_id
					,product_name
					,product_price
					,product_info
					,category_idx
					,product_main_img
					,trading_method
					,product_status
					,trading_location
			FROM PRODUCT 
			WHERE product_name like '%${product_name}%' 
			AND product_release > date_sub(now(),interval 3 month)
			LIMIT 9;
		</select>
    	<insert id="insertReport">
    		INSERT INTO REPORT 
    		VALUES(
    			null
    			,(SELECT member_num
		    		FROM MEMBER
		    		WHERE member_id = #{sId})
		    	,#{product_num}
	    		,#{content}
		    	,#{qna_category_datail}
	    		,now()
	    		,''
	    		,'N'
    		)
    	</insert>
    	<insert id="insertReportImg">
    		INSERT INTO REPORT_IMG
    		 VALUES(
    			(SELECT MAX(report_idx)
    			FROM REPORT)
    			,#{file_name}
    			,#{real_file}
    		)
    	</insert>
    	<select id="selectUserReport" resultType="map">
    	
       SELECT report_idx
			,report_member_num
			,report_product_num
			,report_content
			,qna_category_detail_name
			,report_date
			,report_processing_date
            ,report_is_accept
         FROM QUESTION_CATEGORY_DETAIL q JOIN ( SELECT report_idx
													,report_member_num
													,report_product_num
													,report_content
													,qna_category_detail_num
													,report_date
													,report_processing_date
													,if(report_is_accept='N','미 처리','처리완료') AS report_is_accept
												 FROM REPORT r join (SELECT member_num
																	  FROM MEMBER
																	 WHERE member_id = #{sId}) m
												   ON r.report_member_num = m.member_num) r
		   ON r.qna_category_detail_num = q.qna_category_detail_num ;
    	
    	</select>
    	<select id="selectSellerProduct" resultType="map">
    		select *
    		from PRODUCT
    		where member_id = #{member_id}
    	</select>
   	   	<insert id="registFavorite">
	   		INSERT INTO FAVORITE
	   		VALUES(
	   			null
	   			,#{sId}
	   			,#{proNum}
	   		)
   		</insert>
   		<delete id="deleteFavorite">
	   		DELETE FROM FAVORITE
	   		WHERE member_id = #{sId} 
	   		AND product_num = #{proNum}
  	 	</delete>
    	<select id="selectFavorite" resultType="map">
    		select *
    		FROM FAVORITE
	   		WHERE member_id = #{sId} 
	   		AND product_num = #{proNum}
    	</select>
    	<select id="mainProductList">
	    	SELECT *
			FROM PRODUCT p left 
			JOIN (select product_num,favorite_idx
				FROM FAVORITE
				WHERE member_id = #{sId}) f
			ON p.product_num = f.product_num;
    	</select>
    </mapper>